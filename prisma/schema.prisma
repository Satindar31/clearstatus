// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client"
  output     = "../generated/prisma"
  engineType = "client"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model StatusPage {
  id             String        @id
  title          String
  slug           String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  published      Boolean       @default(false)
  authorId       String
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  Incident       Incident[]
  Monitor        Monitor[]
  Webhook        Webhook[]

  @@map("page")
}

model Monitor {
  id            String        @id
  name          String
  url           String
  description   String?
  type          MonitorType
  uptimeChecker UptimeChecker @default(HETRIXTOOLS)
  status        MonitorStatus @default(UNKNOWN)
  isVisible     Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  statusPageId  String
  statusPage    StatusPage    @relation(fields: [statusPageId], references: [id], onDelete: Cascade)
  Webhook       Webhook[]     @relation("WebhookMonitors")
  Incident      Incident[]    @relation("IncidentMonitors")

  @@map("monitor")
}

enum MonitorType {
  HTTP
  PING
  TCP
  DNS
  SMTP
  POP3
  IMAP
  CUSTOM
}

enum MonitorStatus {
  UP
  DOWN
  PAUSED
  UNKNOWN
}

model Incident {
  id           String           @id
  title        String
  description  String?
  status       IncidentStatus   @default(OPEN)
  severity     IncidentSeverity @default(MINOR)
  reportedBy   User             @relation(fields: [reportedById], references: [id], onDelete: Cascade)
  statusPage   StatusPage       @relation(fields: [statusPageId], references: [id], onDelete: Cascade)
  monitors     Monitor[]        @relation("IncidentMonitors")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  resolvedAt   DateTime?
  statusPageId String
  reportedById String
  Webhook      Webhook[]        @relation("WebhookIncidents")

  @@map("incident")
}

enum IncidentStatus {
  OPEN
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum IncidentSeverity {
  MINOR
  MAJOR
  CRITICAL
}

model Webhook {
  id            String        @id @default(cuid())
  slug          String        @unique
  monitor       Monitor       @relation("WebhookMonitors", references: [id], fields: [monitorId], onDelete: Cascade)
  statusPage    StatusPage    @relation(fields: [statusPageId], references: [id], onDelete: Cascade)
  incidents     Incident[]    @relation("WebhookIncidents")
  uptimeChecker UptimeChecker
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  monitorId     String
  statusPageId  String

  @@map("webhook")
}

enum UptimeChecker {
  HETRIXTOOLS
  UPDOWN
  STATUSCAKE
  PINGDOM
  CHECKLY
  DATADOG
  PAGERDUTY
  NEWRELIC
  UPTIMEROBOT
  BETTERUPTIME
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  admin         Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  twoFactorEnabled Boolean?     @default(false)
  passkeys         Passkey[]
  members          Member[]
  invitations      Invitation[]
  twofactors       TwoFactor[]
  Incident         Incident[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  statusPages StatusPage[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}
